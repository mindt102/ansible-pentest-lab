variables:
  # To optimize CI/CD time
  GIT_DEPTH: 10
  # To avoid SSL certificate verification error when cloning private repositories
  GIT_SSL_NO_VERIFY: 1

default:
  image:
    name: theohbrothers/docker-ansible:v2.10.7-alpine-3.13
    pull_policy: if-not-present
  tags:
    - docker

stages:
  - server
  - client

.setup_ansible:
  before_script:
    - mkdir -p /etc/ansible/
    - cp -f "$ANSIBLE_CFG" /etc/ansible/ansible.cfg

create-certificates:
  stage: server
  extends: .setup_ansible
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY --private-key "$SSH_PRIVATE_KEY" playbooks/create_certificates.yml
  when: manual

config-vpnserver:
  stage: server
  extends: .setup_ansible
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY --private-key "$SSH_PRIVATE_KEY" playbooks/config_vpnserver.yml
  when: manual

create-clients:
  stage: client
  extends: .setup_ansible
  script:
    - ansible-playbook -i $ANSIBLE_INVENTORY --private-key "$SSH_PRIVATE_KEY" playbooks/create_clients.yml
    - mkdir -p clients
    - cp -f /etc/openvpn/client/*.ovpn clients/
  when: manual
  artifacts:
    paths:
      - clients/
# generate-clients:
#   stage: client
#   script:
#     - ansible-playbook -i inventory client.yml
#   when: manual
#   only:
#     - master
# .install-easyrsa:
#   variables:
#   before_script:
#     # Install the latest version of EasyRSA
#     - apt update
#     - apt install -y curl git
#     - easyrsa_version=$(curl --silent "https://api.github.com/repos/OpenVPN/easy-rsa/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
#     - easyrsa_url="https://github.com/OpenVPN/easy-rsa/releases/download/v${easyrsa_version}/EasyRSA-${easyrsa_version}.tgz"
#     - curl -so /tmp/easyrsa.tgz -L "$easyrsa_url"
#     - tar -xzf /tmp/easyrsa.tgz -C /tmp
#     - easyrsa_path=/tmp/EasyRSA-${easyrsa_version}

#     # Initialize PKI
#     - export EASYRSA_BATCH=1
#     - $easyrsa_path/easyrsa init-pki

# prepare-ca:
#   extends: .install-easyrsa
#   image: debian:11
#   stage: CA
#   script:
#     # Build CA
#     - $easyrsa_path/easyrsa build-ca nopass
#     - cp pki/ca.crt .
#     - cp pki/private/ca.key .
#   when: manual
#   artifacts:
#     paths:
#       - ca.key
#       - ca.crt

# prepare-server-cert:
#   extends: .install-easyrsa
#   image: debian:11
#   stage: Server
#   script:
#     - if [ ! -f $CA_CRT ] || [ ! -f $CA_KEY ]; then
#       echo "Please run prepare-ca job first and set the CA_CRT and CA_KEY variables in gitlab CI/CD settings";
#       exit 1;
#       fi

#     - cp $CA_CRT pki/ca.crt
#     - cp $CA_KEY pki/private/ca.key

#     # Generate server certificate
#     - $easyrsa_path/easyrsa build-server-full server nopass

#     # Generate DH params
#     - $easyrsa_path/easyrsa gen-dh
#   artifacts:
#     paths:
#       - pki/issued/server.crt
#       - pki/private/server.key
#       - pki/ca.crt
#       - pki/dh.pem
#   when: manual

# deploy-vpn-server:
#   needs:
#     - job: prepare-server-cert
#       artifacts: true
#   stage: Server
#   script:
#     - cp pki/ca.crt /etc/openvpn/server
#     - cp pki/dh.pem /etc/openvpn/server
#     - cp pki/issued/server.crt /etc/openvpn/server
#     - cp pki/private/server.key /etc/openvpn/server
#     - ls -la /etc/openvpn/server
#   when: on_success
# - ansible-playbook -i $ANSIBLE_INVENTORY --private-key "$SSH_PRIVATE_KEY" playbooks/main.yml
