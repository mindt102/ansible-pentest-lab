variables:
  # To optimize CI/CD time
  GIT_DEPTH: 10
  # To avoid SSL certificate verification error when cloning private repositories
  GIT_SSL_NO_VERIFY: 1

default:
  image:
    name: theohbrothers/docker-ansible:v2.10.7-alpine-3.13
    pull_policy: if-not-present
  tags:
    - docker

stages:
  - CA
  - Server

.install_easyrsa:
  before_script:
    # Install the latest version of EasyRSA
    - apt update
    - apt install -y curl git
    - easyrsa_version=$(curl --silent "https://api.github.com/repos/OpenVPN/easy-rsa/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - easyrsa_url="https://github.com/OpenVPN/easy-rsa/releases/download/v${easyrsa_version}/EasyRSA-${easyrsa_version}.tgz"
    - curl -so /tmp/easyrsa.tgz -L "$easyrsa_url"
    - tar -xzf /tmp/easyrsa.tgz -C /tmp
    - cd /tmp/EasyRSA-${easyrsa_version}
prepare-ca:
  extends: .install_easyrsa
  image: debian:11
  stage: CA
  script:
    # Initialize PKI
    - ./easyrsa init-pki

    # Build CA
    - export EASYRSA_BATCH=1
    - ./easyrsa build-ca nopass
  when: manual
  artifacts:
    paths:
      - /tmp/EasyRSA-${easyrsa_version}/pki/ca.crt
      - /tmp/EasyRSA-${easyrsa_version}/pki/private/ca.key

prepare_server:
  extends: .install_easyrsa
  image: debian:11
  stage: Server
  script:
    - if [ -z $CA_CRT ] || [ -z $CA_KEY ]; then
      echo "Please run prepare-ca job first and set the CA_CRT and CA_KEY variables";
      exit 1;
      fi
    - echo $easyrsa_version
  when: manual
# - ansible-playbook -i $ANSIBLE_INVENTORY --private-key "$SSH_PRIVATE_KEY" playbooks/main.yml
